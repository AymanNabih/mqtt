/*
 * Copyright 2013 dc-square GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.bsiag.hivemq.scanner.plugin;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.apache.commons.configuration.Configuration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.bsiag.hivemq.scanner.callbacks.ClientConnect;
import com.bsiag.hivemq.scanner.callbacks.ClientDisconnect;
import com.bsiag.hivemq.scanner.callbacks.ClientSubscribe;
import com.bsiag.hivemq.scanner.callbacks.ClientUnsubscribe;
import com.bsiag.hivemq.scanner.callbacks.PublishReceived;
import com.bsiag.hivemq.scanner.callbacks.SimpleScheduledCallback;
import com.bsiag.hivemq.scanner.callbacks.advanced.AddBridgeOnHiveMQStart;
import com.bsiag.hivemq.scanner.callbacks.advanced.AddSubscriptionOnClientConnect;
import com.bsiag.hivemq.scanner.callbacks.advanced.LogBrokerUptime;
import com.bsiag.hivemq.scanner.callbacks.advanced.ScheduledClearRetainedCallback;
import com.bsiag.hivemq.scanner.callbacks.advanced.SendListOfAllClientsOnPublish;
import com.dcsquare.hivemq.spi.PluginEntryPoint;
import com.dcsquare.hivemq.spi.callback.registry.CallbackRegistry;
import com.dcsquare.hivemq.spi.services.RetainedMessageStore;

/**
 * This is the main class of the plugin, which is instanciated during the HiveMQ start up process.
 */
public class ScannerMainClass extends PluginEntryPoint {

    Logger log = LoggerFactory.getLogger(ScannerMainClass.class);

    private final Configuration configuration;

    private final ClientConnect clientConnect;
    private final ClientDisconnect clientDisconnect;
    private final ClientSubscribe clientSubscribe;
    private final ClientUnsubscribe clientUnsubscribe;

    /**
     * @param configuration Injected configuration, which is declared in the {@link ScannerPluginModule}.
     */
    @Inject
    public ScannerMainClass(Configuration configuration, 
    		final RetainedMessageStore retainedMessageStore,
            final ClientConnect clientConnect, 
            final ClientDisconnect clientDisconnect, 
            final ClientSubscribe clientSubscribe, 
            final ClientUnsubscribe clientUnsubscribe 
           ) 
    {
        this.configuration = configuration;
        this.clientConnect = clientConnect;
        this.clientDisconnect = clientDisconnect;
        this.clientSubscribe = clientSubscribe;
        this.clientUnsubscribe = clientUnsubscribe;
    }

    /**
     * This method is executed after the instanciation of the whole class. It is used to initialize
     * the implemented callbacks and make them known to the HiveMQ core.
     */
    @PostConstruct
    public void postConstruct() {

        CallbackRegistry callbackRegistry = getCallbackRegistry();
        
        callbackRegistry.addCallback(clientConnect);
        callbackRegistry.addCallback(clientDisconnect);
        callbackRegistry.addCallback(clientSubscribe);
        callbackRegistry.addCallback(clientUnsubscribe);

        log.info("Plugin configuration property: {}", configuration.getString("myProperty"));
    }
}
